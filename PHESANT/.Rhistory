library(PHESANT)
rm(list = ls())
rm(list = ls())
library(PHESANT)
load(file = "opt.RData")
getwd()
load(file = "../opt.RData")
save(opt, file = "opt_only.RData")
rm(list = ls())
library(PHESANT)
load(file = "opt_only.RData")
counters=initCounters();
if (opt$save==FALSE) {
initResultsFiles();
}
vl=initVariableLists();
## load data
d <- loadData()
data=d$datax
confounders=d$confounders
indicatorFields=d$inds
numPreceedingCols = ncol(confounders)-1+2; # confounders,minus id column, plus trait of interest and user ID
phenoStartIdx = numPreceedingCols+1;
print("LOADING DONE")
phenoVars=colnames(data);
# remove user id and age and sex columns
phenoVars = phenoVars[-c(1,2)]; # first and second columns are the id and snpScore, respectively, as determined in loadData.r
currentVar="";
currentVarShort="";
first=TRUE;
if (opt$save == TRUE) {
derivedBinary <- data.frame(userID=data$userID)
derivedCont <- data.frame(userID=data$userID)
derivedCatOrd <- data.frame(userID=data$userID)
derivedCatUnord <- data.frame(userID=data$userID)
resLogFile = paste(opt$resDir,"data-log-",opt$varTypeArg,".txt",sep="")
sink(resLogFile)
} else {
modelFitLogFile = paste(opt$resDir,"modelfit-log-",opt$varTypeArg,".txt",sep="")
sink(modelFitLogFile)
sink()
resLogFile = paste(opt$resDir,"results-log-",opt$varTypeArg,".txt",sep="")
sink(resLogFile)
}
phenoIdx=0; # zero because then the idx is the position of the previous variable, i.e. the var in currentVar
for (var in phenoVars) {
sink()
#	print(var)
sink(resLogFile, append=TRUE)
varx = gsub("^x", "", var);
varx = gsub("_[0-9]+$", "", varx);
varxShort = gsub("^x", "", var);
varxShort = gsub("_[0-9]+_[0-9]+$", "", varxShort);
## test this variable
if (currentVar == varx) {
thisCol = data[,eval(var)]
thisCol = replaceNaN(thisCol)
currentVarValues = cbind.data.frame(currentVarValues, thisCol);
}
else if (currentVarShort == varxShort) {
## different time point of this var so skip
}
else {
## new variable so run test for previous (we have collected all the columns now)
if (first==FALSE) {
thisdata = makeTestDataFrame(data, confounders, currentVarValues)
testAssociations(currentVar, currentVarShort, thisdata)
}
first=FALSE;
## new variable so set values
currentVar = varx;
currentVarShort = varxShort;
currentVarValues = data[,eval(var)]
currentVarValues = replaceNaN(currentVarValues)
}
phenoIdx = phenoIdx + 1;
}
if (phenoIdx>0){
# last variable so test association
thisdata = makeTestDataFrame(data, confounders, currentVarValues)
testAssociations(currentVar, currentVarShort, thisdata)
}
sink()
# save counters of each path in variable flow
saveCounts()
if (opt$save == TRUE) {
write.table(derivedBinary, file=paste(opt$resDir,"data-binary-",opt$varTypeArg,".txt", sep=""), append=FALSE, quote=FALSE, sep=",", na="", row.names=FALSE, col.names=TRUE);
write.table(derivedCont, file=paste(opt$resDir,"data-cont-",opt$varTypeArg,".txt", sep=""), append=FALSE, quote=FALSE, sep=",", na="", row.names=FALSE, col.names=TRUE);
write.table(derivedCatOrd, file=paste(opt$resDir,"data-catord-",opt$varTypeArg,".txt", sep=""), append=FALSE, quote=FALSE, sep=",", na="", row.names=FALSE, col.names=TRUE);
write.table(derivedCatUnord, file=paste(opt$resDir,"data-catunord-",opt$varTypeArg,".txt", sep=""), append=FALSE, quote=FALSE, sep=",", na="", row.names=FALSE, col.names=TRUE);
}
warnings()
library(PHESANT)
rm(list = ls())
library(PHESANT)
library("optparse")
option_list
library(PHESANT)
rm(list = ls())
args <- commandArgs(T)
args
commandArgs
? commandArgs
len(args)
lenth(args)
size(args)
class(args)
args[1]
dim(args)
length(args)
rm(list = ls())
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
args <- commandArgs(T)
length(args) == 0
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
source('~/Documents/GitHub/PHESANT/PHESANT/R/testAssociations.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
rm(list = ls())
## load data
d <- loadData(vl)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/R/loadData.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
opt$save
View(data)
library(PHESANT)
library(PHESANT)
pkg.env
pkg.env$a
pkg.env$derivedBinary <- data.frame(userID=data$userID)
write.table(pkg.env$derivedBinary, file=paste(opt$resDir,"data-binary-",opt$varTypeArg,".txt", sep=""), append=FALSE, quote=FALSE, sep=",", na="", row.names=FALSE, col.names=TRUE);
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/R/testContinuous.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
pkg.env$modelFitLogFile
source('~/Documents/GitHub/PHESANT/PHESANT/R/testCategoricalOrdered.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
pkg.env
names(pkg.env)
pkg.env$counters
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/R/storeNewVar.r')
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
? print_help
vl
vl$indicatorFields=d$inds
vl
names(vl)
library(PHESANT)
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
source('~/Documents/GitHub/PHESANT/PHESANT/phenomeScan.r')
